Name

	EGL_COREAVI_device_init

Name Strings
	
	EGL_EXT_device_init
	
Contact

	Nicolas Collin, Core Avionics & Industrial Inc. (nicolas 'dot' collin 'at' coreavi 'dot' com)

Contributors
	
	Anirban Basu
	Daniel Herring, 
	Ken Wenger 

Status

	Complete

Version

	Last Modified Date: May 5, 2022
	Revision: 0.5

Number

    EGL Extension #147

Extension Type

    EGL client extension

Dependencies

	Requires EGL 1.0
	
	This extension is written against the wording of the EGL 1.4
	Specification - December 4, 2013, but may be implemented against earlier
	versions.
	
Overview

	This extension provides for a means to execute the EGL API's on 
	systems lacking native windowing systems. An embedded GPU system 
	could be a typical example of this. 
	
	Traditionally EGL functions rely on the information provided by the 
	windowing system to create displays and surfaces or to enumerate 
	available configs. Systems lacking these software stacks can use 
	the proposed functions to incorporate some basic device and display 
	management of the GPU and standardize the way to obtain the required
	information. 
	
IP Status

	No known IP claims.

New Procedures and Functions

	EGLDeviceEXT eglInitializeDeviceEXT(EGLAttribKHR *attrib_list);

	EGLBoolean eglDestroyDeviceEXT(EGLDeviceEXT device);
	
New Types

	typedef void* EGLDeviceEXT

New Tokens

eglInitializeDeviceEXT can return this to indicate that no valid 
device object was created. 

	#define EGL_NO_DEVICE_EXT       ((EGLDeviceEXT)0)
	
Additions to Chapter 3 of the EGL 1.4 Specification
(EGL Functions and Errors)

Add the function to section 3.2 Pg 12:

	Applications can choose and initialize an EGL device at the
	start by calling the function:					

	EGLDeviceEXT eglInitializeDeviceEXT(EGLAttribKHR *attrib_list);  			
		
	This function initalizes the EGL device chosen through the device
	ID attribute in <attrib_list> and generates an internal list of all the
	supported displays. This list will be used later by eglGetDisplay to
	provide an appropriate display to the application. Any additional
	device / display management tasks required to support the EGL API's
	should be handled here. The function returns an object of type
	EGLDeviceEXT, which is an abstract representation of a graphics device.
	All EGL operations for the given device happen on this device object.
	All attribute names in <attrib list> are immediately followed by the
	corresponding desired value. The list is terminated with EGL_NONE.
	Each attribute can either be the device ID attribute, a system
	attribute or an object creation maximum. The device ID attribute
	specifies which GPU to initialize, the system attributes pass initialization 
	parameters affecting the system behavior, and the object creation maximums
	pass in the maximum number of a certain object type to create. Passing 
	an invalid attribute or value will cause the function to fail and it 
	will return EGL_NO_DEVICE_EXT. Passing either an empty attribute list 
	or a NULL pointer will return a device object representing the first 
	device in the system initialized with all the default parameters. 
	However, note that default parameters don't include the shaders attributes.
	
	On Failure, eglInitializeDeviceEXT will return EGL_NO_DEVICE_EXT. 
	
	Calling this function with the same <attrib_list> multiple times will
	return the same device object and will have no additional impact.
	
Add the function to the end of section 3.2 on pg. 14:

	At the end of all the rendering operations, after terminating all
	displays relative to a device, and destroying all the associated
	contexts and surfaces, the said device object can be destroyed by
	calling:

		EGLBoolean eglDestroyDeviceEXT(EGLDeviceEXT device);
	
	This function will destroy the device object 'device' and release
	all resources held by it. Referring to destroyed device objects 
	will result in an error.
	
	eglDestroyDeviceEXT will return EGL_FALSE on a failure. Failure to
	destroy a device might be an indication that resources held by the 
	device were not successfully relinquished and any subsequent Device 
	re-initialization might fail too. Restarting the entire graphic 
	sub-system might be the only option in such cases. 

Errors

	eglInitializeDeviceEXT returns EGL_NO_DEVICE_EXT on failure. 
	
	eglDestroyDevicesEXT returns EGL_FALSE on failure. 

Sample Code

   None

Conformance Tests

    None

Issues

    1. Why is the attribute list of type EGLAttribKHR ?
   
       To allow attributes to pass in 64-bit values like pointers. 
	 
    2. Will eglDestroyDevicesEXT() synchronize with the client API's 
       to wait for all commands to complete before destroying the 
       device ?
	
       No, it is the responsibility of the application to make sure all
       drawing commands on all contexts have finished and all displays 
       have been terminated before destroying the device. The 
       application can use all the synchronization API's at its 
       disposal to easily ensure that all the tasks on all threads have 
       completed before calling eglDestroyDevicesEXT. 

Revision History
	
	Revision 0.5 2022/05/05
	    - Add attributes for object creation maximums.
		
	Revision 0.4 2021/10/12
	    - Fixed typos.
	    - Add device ID attribute.

	Revision 0.3 2020/06/22
	    - Changed the name of he initialization function. 
	    - Add more description on attribute types. 
	    - Change Attribute list to be of type EGLAttribKHR
		
	Revision 0.2 2020/06/16
	    - Improved description based on review comments. 
		
	Revision 0.1 2020/06/08
	    - Initial Draft
